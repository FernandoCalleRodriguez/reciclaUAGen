
package reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTOA;

import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.*;
import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.utils.*;
import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class DudaDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private String titulo;
	public String getTitulo () { return titulo; }
	public void setTitulo (String titulo) { this.titulo = titulo; }
	
	private String cuerpo;
	public String getCuerpo () { return cuerpo; }
	public void setCuerpo (String cuerpo) { this.cuerpo = cuerpo; }
	
	private java.util.Date fecha;
	public java.util.Date getFecha () { return fecha; }
	public void setFecha (java.util.Date fecha) { this.fecha = fecha; }
	
	private Integer util;
	public Integer getUtil () { return util; }
	public void setUtil (Integer util) { this.util = util; }
	
	private Tema tema;
	public Tema getTema () { return tema; }
	public void setTema (Tema tema) { this.tema = tema; }
	
	
	/* Rol: Duda o--> UsuarioAdminAutenticado */
	private UsuarioAdminAutenticadoDTOA usuarioDuda;
	public UsuarioAdminAutenticadoDTOA getUsuarioDuda () { return usuarioDuda; }
	public void setUsuarioDuda (UsuarioAdminAutenticadoDTOA usuarioDuda) { this.usuarioDuda = usuarioDuda; }

	
	/* ServiceLink: obtenerNumeroDeRespuestas */
	private Integer obtenerNumeroDeRespuestas;
	public Integer getObtenerNumeroDeRespuestas () { return obtenerNumeroDeRespuestas; }
	public void setObtenerNumeroDeRespuestas (Integer obtenerNumeroDeRespuestas) { this.obtenerNumeroDeRespuestas = obtenerNumeroDeRespuestas; }

	/* ServiceLink: obtenerSiRespuestaValida */
	private Boolean obtenerSiRespuestaValida;
	public Boolean getObtenerSiRespuestaValida () { return obtenerSiRespuestaValida; }
	public void setObtenerSiRespuestaValida (Boolean obtenerSiRespuestaValida) { this.obtenerSiRespuestaValida = obtenerSiRespuestaValida; }

	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public DudaDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Titulo")))
			{
			 
				this.titulo = (String) json.opt("Titulo");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Cuerpo")))
			{
			 
				this.cuerpo = (String) json.opt("Cuerpo");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Fecha")))
			{
			 
			 	String stringDate = (String) json.opt("Fecha");
				this.fecha = DateUtils.stringToDateFormat(stringDate);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Util")))
			{
			 
				this.util = (Integer) json.opt("Util");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Tema")))
			{
				int enumRawValue = (int) json.opt("Tema");
				this.tema = Tema.fromRawValue(enumRawValue);
			 
			}
			

			JSONObject jsonUsuarioDuda = json.optJSONObject("UsuarioDuda");
			if (jsonUsuarioDuda != null)
			{
				UsuarioAdminAutenticadoDTOA tmp = new UsuarioAdminAutenticadoDTOA();
				tmp.setFromJSON(jsonUsuarioDuda);
				this.usuarioDuda = tmp;
			}

			

			JSONObject jsonObtenerNumeroDeRespuestas = json.optJSONObject("ObtenerNumeroDeRespuestas");
			if (jsonObtenerNumeroDeRespuestas != null)
			{
				DudaDTOA tmp = new DudaDTOA();
				tmp.setFromJSON(jsonObtenerNumeroDeRespuestas);
				this.obtenerNumeroDeRespuestas = tmp;
			}

			JSONObject jsonObtenerSiRespuestaValida = json.optJSONObject("ObtenerSiRespuestaValida");
			if (jsonObtenerSiRespuestaValida != null)
			{
				DudaDTOA tmp = new DudaDTOA();
				tmp.setFromJSON(jsonObtenerSiRespuestaValida);
				this.obtenerSiRespuestaValida = tmp;
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.titulo != null)
			json.put("Titulo", this.titulo);
		
		
		  if (this.cuerpo != null)
			json.put("Cuerpo", this.cuerpo);
		
		
		  if (this.fecha != null)
			json.put("Fecha", DateUtils.dateToFormatString(this.fecha));
		
		
		  if (this.util != null)
			json.put("Util", this.util.intValue());
		
		
		  if (this.tema != null)
			json.put("Tema", this.tema.getRawValue());
		
			

			if (this.usuarioDuda != null)
			{
				json.put("UsuarioDuda", this.usuarioDuda.toJSON());
			}

			

			if (this.obtenerNumeroDeRespuestas != null)
			{
				json.put("ObtenerNumeroDeRespuestas", this.obtenerNumeroDeRespuestas.toJSON());
			}

			if (this.obtenerSiRespuestaValida != null)
			{
				json.put("ObtenerSiRespuestaValida", this.obtenerSiRespuestaValida.toJSON());
			}
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		DudaDTO dto = new DudaDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setTitulo (this.getTitulo());

	dto.setCuerpo (this.getCuerpo());

	dto.setFecha (this.getFecha());

	dto.setUtil (this.getUtil());

	dto.setTema (this.getTema());

		
		
		// Roles
					// TODO: from DTOA [ UsuarioDuda ] (dataType : UsuarioAdminAutenticadoDTOA) to DTO [ Usuario ]
		
		
		return dto;
	}

	// endregion
}

	