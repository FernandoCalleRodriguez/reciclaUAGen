
package reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTOA;

import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.*;
import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.utils.*;
import reciclaUAGenReciclaUAAdminRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class AccionReciclarDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private Integer cantidad;
	public Integer getCantidad () { return cantidad; }
	public void setCantidad (Integer cantidad) { this.cantidad = cantidad; }
	
	private java.util.Date fecha;
	public java.util.Date getFecha () { return fecha; }
	public void setFecha (java.util.Date fecha) { this.fecha = fecha; }
	
	
	/* Rol: AccionReciclar o--> Item */
	private ItemDTOA itemAccion;
	public ItemDTOA getItemAccion () { return itemAccion; }
	public void setItemAccion (ItemDTOA itemAccion) { this.itemAccion = itemAccion; }

	/* Rol: AccionReciclar o--> Contenedor */
	private ContenedorDTOA contenedorAccion;
	public ContenedorDTOA getContenedorAccion () { return contenedorAccion; }
	public void setContenedorAccion (ContenedorDTOA contenedorAccion) { this.contenedorAccion = contenedorAccion; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public AccionReciclarDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Cantidad")))
			{
			 
				this.cantidad = (Integer) json.opt("Cantidad");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Fecha")))
			{
			 
			 	String stringDate = (String) json.opt("Fecha");
				this.fecha = DateUtils.stringToDateFormat(stringDate);
			 
			}
			

			JSONObject jsonItemAccion = json.optJSONObject("ItemAccion");
			if (jsonItemAccion != null)
			{
				ItemDTOA tmp = new ItemDTOA();
				tmp.setFromJSON(jsonItemAccion);
				this.itemAccion = tmp;
			}


			JSONObject jsonContenedorAccion = json.optJSONObject("ContenedorAccion");
			if (jsonContenedorAccion != null)
			{
				ContenedorDTOA tmp = new ContenedorDTOA();
				tmp.setFromJSON(jsonContenedorAccion);
				this.contenedorAccion = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.cantidad != null)
			json.put("Cantidad", this.cantidad.intValue());
		
		
		  if (this.fecha != null)
			json.put("Fecha", DateUtils.dateToFormatString(this.fecha));
		
			

			if (this.itemAccion != null)
			{
				json.put("ItemAccion", this.itemAccion.toJSON());
			}


			if (this.contenedorAccion != null)
			{
				json.put("ContenedorAccion", this.contenedorAccion.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		AccionReciclarDTO dto = new AccionReciclarDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setCantidad (this.getCantidad());

	dto.setFecha (this.getFecha());

		
		
		// Roles
					// TODO: from DTOA [ ItemAccion ] (dataType : ItemDTOA) to DTO [ Item ]
					// TODO: from DTOA [ ContenedorAccion ] (dataType : ContenedorDTOA) to DTO [ Contenedor ]
		
		
		return dto;
	}

	// endregion
}

	